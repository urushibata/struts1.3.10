package com.urushibata.struts1.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.actions.MappingDispatchAction;

import com.urushibata.struts1.common.MassageGroup;
import com.urushibata.struts1.common.ResultLiterals;
import com.urushibata.struts1.dto.LoginDTO;
import com.urushibata.struts1.exception.CoreException;
import com.urushibata.struts1.form.LoginFormBean;
import com.urushibata.struts1.form.MenuFormBean;
import com.urushibata.struts1.service.UserAuthentication;

import java.lang.reflect.InvocationTargetException;
import java.sql.SQLException;

public class LoginAction extends MappingDispatchAction{
	private LoginFormBean lf;
	private MenuFormBean mf;
	private LoginDTO dto;

	/*
	 * 表示
	 */
	public ActionForward init(ActionMapping mapping, ActionForm form,
									HttpServletRequest req, HttpServletResponse res) {
		System.out.println("loginAction init !!");
		return mapping.findForward("success");
	}

	/*
	 * ログイン認証
	 */
	public ActionForward authentication(ActionMapping mapping, ActionForm form,
												HttpServletRequest req, HttpServletResponse res)
										throws SQLException, IllegalAccessException,
												InvocationTargetException {
		System.out.println("loginAction authentication !! START");
		ActionMessages ams = new ActionMessages();
		ActionMessage msg;

		//ActionFormをDTOにコピーする。
		lf = (LoginFormBean)form;
		dto = new LoginDTO();
		copyDTO();

		//ユーザ認証
		UserAuthentication ut = new UserAuthentication(dto);
		try{
			ut.authentication();
		}catch(CoreException e){
			for(String str: e.getErrMessage()){
				msg = new ActionMessage(e.getErrMessage());
				ams.add(MassageGroup.CORRELATION, msg);
			}

			super.saveErrors(req, ams);
			return mapping.findForward(ResultLiterals.actionResult_Failure);
		}

		//ActionFormにユーザ情報をコピーする。
		mf = new MenuFormBean();
		copyActionForm();
		//リクエストに格納
		req.setAttribute("MenuFormBean", mf);

		System.out.println("loginAction authentication !! END");
		return mapping.findForward(ResultLiterals.actionResult_Success);
	}

	/*
	 * ActionFormをDTOにコピー
	 */
	private void copyDTO() throws IllegalAccessException, InvocationTargetException{
		BeanUtils.copyProperties(dto, lf);
	}

	/*
	 * DTOをActionFormにコピー
	 */
	private void copyActionForm() throws IllegalAccessException, InvocationTargetException{
		this.mf = new MenuFormBean();

		//TODO なぜかコピーできない。Beanがネストしているから？
		//BeanUtils.copyProperties(this.mf, this.dto.getVO());
		this.mf.setUserId(this.dto.getUserId());
		this.mf.setUserName(this.dto.getVO().getUserName());
		this.mf.setAddress(this.dto.getVO().getAddress());
		this.mf.setMail(this.dto.getVO().getMail());
		this.mf.setCompanyName(this.dto.getVO().getCompanyName());
		this.mf.setEmployeeNo(this.dto.getVO().getEmployeeNo());
	}
}